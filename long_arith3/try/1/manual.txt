Лаба3: описание

	Часть 1 DLL на Windows:

Создаём новый проект в Visual Studio, консольное приложение win32, после пары тычков далее отмечаем галочку DLL и пустой проект.
Создаём там cpp файл, в него копируем содержимое из библиотеки 2ой лабы. В конце необходимо дописать экспортируемые функции. Они специально описываются так, чтобы их удобно было вызывать из питона. 
extern "C" {
....
}

внутри описываем нужные функции. что нам надо:
1.перегрузки всех операторов(* + - и т.д.) BigInt_mul, BigInt_add и т.д.
2.функции "сохранить в файл", "Считать", "Степень"(BigInt_save,BigInt_get,BigInt_power)
3.функция для создания объекта из класса BigInt (BigInt_new)


Почти во всех фунциях получаем указатели на объекты, и возвращать должны тоже указатели.
Каждая функция ссылается на соотв. фунции из самой библиотеки(или выполняет арифм. действие, описанное в ней)

__declspec(dllexport) указывается именно для DLL на Windows
фишки типа ff[0] и num->... используются т.к. мы имеем дело с указателями, и надо пройти по их адресу.

Описание функций выглядит точно так же как и у обычных(если не смотреть на __declspeс..)
[Что возвращает] [Название фунции]([Параметры функции])   {[тело фунции]}
    BigInt*         BigInt_add      (BigInt* a,BigInt* b)     { ...}

Далее собираем проект (Построение -> Построить решение) и ищем нашу DLL либо в папке Debug либо в Release. 
Наша DLL готова, можем её использовать (кинуть в папку с питоном)



	Часть 2 .so На Linux

Всё что нужно сделать для создания динамической библиотеки на Linux, это взять старый код DLL-ки из винды и убрать оттуда __declspec(dllexport) перед экспортируемыми фунциями(код лежит в 2.cpp).

Теперь можно собирать прямо из консоли:
"g++ -c -fPIC 2.cpp -o 2.o"
"g++ -shared -Wl,-soname,2.so -o 2.so  2.o"

Наша библиотека готова, берём 2.so и кидаем его в папку с python-файлом





	Часть 3 Использование библиотеки в питоне

Для использования библиотеки подключаем её:
lib = cdll.LoadLibrary('./DLLTEST.dll')  #на линуксе нужно будет подключать .so файл

Далее нам нужно уже на питоне описать используемый класс (BigInt) ссылаясь на нашу библиотеку

В классе нам необходимо задать все нужные нам функции:
1.перегрузки всех операторов(* + - и т.д.) __mul__, __add__ и т.д.
2.функции "сохранить в файл", "Считать", "Степень"(save,get,power)
3.функция для создания объекта из класса BigInt (__init__)

Во всех функциях используем lib. для вызова функций, которые мы описали в динамических библиотеках(Часть 1 и 2)

В силу неприодолимых обстоятельств(моей лени) все фунции записывают результат в первую переменную("a+b" - результат будет в "a" и так со всеми)

В остальном функции выглядят довольно просто: все входящие параметры посылаем в функцию из библиотеки и результат записываем в self(объект, от которого была вызвана фунция)



В главной фунции (__main__) происходит ровно то же самое, что и в главной фунции в с++:
Читаем\проверяем параметры из командной строки (все они в sys.argv)

Далее создаём 2 переменные(в случае "^"  - 3) при помощи фунции __init__ ("f = BigInt()")
Считываем данные в наши переменные с помощью .get(...), куда передаём нужные имена файлов и режим считывания.

Далее выполняем нужную операцию(она лежит в sys.argv[2])
В случае успешного выполнения сохраняем результат в файл (.save)


Вот и всё :-)



P.S.
У меня возникла одна проблема с питоном, он не хотел передавать параметры из консоли.
питон файлы на винде из cmd запускались просто как 
1.py ... (без подписи python перед ними)
чтобы это исправить пришлось скопировать "python.exe" из корня установки самого питона(у меня лежал как "D:\\Python 2.7\")
После этого запускаю как
python 1.py 1.txt + 2.txt ....
и параметры передаются.